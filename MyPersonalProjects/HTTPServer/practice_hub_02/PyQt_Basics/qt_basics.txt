

########### GETTING STARTED IN QT && BASICS #############




üîç Option 1: Launch Qt Designer from Qt Creator


Open Qt Creator.

	(1.) Go to the top menu:

	(2.) Tools ‚Üí External ‚Üí Qt Designer

	(3.)If it's listed there, click it to launch.







üîç Option 2: Launch Qt Designer manually


If the menu doesn't show it or you prefer a manual method:


Find the installation folder of Qt.


For example:


	On Linux:
		
		/opt/Qt/5.x.x/bin/designer

	
	On Windows:

		C:\Qt\5.x.x\mingwXX_XX\bin\designer.exe

	
	On macOS:
	
		/Users/YourName/Qt/5.x.x/clang_64/bin/designer


	Double-click designer (or designer.exe) to launch it.






‚úÖ Step-by-Step: Convert .ui to .py



üîß 1. Make sure pyuic is installed



If you're using PyQt5:

	pip install pyqt5


If you're using PyQt6:

	pip install pyqt6


This also installs the pyuic tool.





üíª 2. Run the conversion command



For PyQt5:

	pyuic5 your_file.ui -o your_file.py


For PyQt6:

	pyuic6 your_file.ui -o your_file.py


Make sure you run this in the same directory as your .ui file, or give the full path.





üìÅ Example


	pyuic5 main_window.ui -o ui_main_window.py


This converts main_window.ui into a Python script named ui_main_window.py.






üõ†Ô∏è Tip: Add it to a script


If you're frequently updating the .ui file, you can add this to a shell script or VSCode task to make things easier.







üîî Part 1: Signals and Slots in PyQt/PySide



üß† What are signals and slots?



Qt uses a signals and slots mechanism to handle events. This is how different parts of a GUI communicate with each other.


	Concept			Meaning


	Signal			An event that occurs, like a button being clicked, or a value changing.


	Slot			A method or function that responds to the signal (i.e., it's called when the event happens).






üìå Why use signals and slots?



They let your GUI components (like buttons, menus, sliders, etc.) communicate without tight coupling. It makes your code more modular and maintainable.



üîÑ Real-World Analogy:


Think of a doorbell system.


	The button press is a signal: it announces that something has happened.

	The bell ringing is the slot: it reacts to that signal.

	You connect the button press to the bell ring:

		doorbell_button.pressed.connect(ring_bell)








‚úÖ Common Signals


Some built-in signals in PyQt/PySide:


	Widget			Signal			Meaning


	QPushButton		clicked			Emitted when the button is clicked


	QAction			triggered		Emitted when a menu or toolbar item is activated


	QLineEdit		textChanged		Emitted when the text in the input box changes




‚úÖ Connecting a Signal to a Slot


Basic Syntax:

	widget.signal.connect(slot_function)

	
	Example:

		self.button.clicked.connect(self.say_hello)

		Now whenever self.button is clicked, the method say_hello() will run.





üîÑ Signals Can Send Data


Some signals pass data. For example:

	def on_text_changed(text):
    		print("Text is:", text)

	self.input.textChanged.connect(on_text_changed)

	# The textChanged signal sends the new text as a string, which is received by the on_text_changed slot.







‚öôÔ∏è Part 2: Lambda Functions in Python


üß† What is a Lambda?


A lambda is an anonymous function ‚Äî a function without a name.


Syntax:

	lambda arguments: expression


Example:

	f = lambda x: x * 2
	print(f(5))  # Output: 10


Why use lambda?


Short and simple functions

Inline behavior ‚Äî perfect for GUI callbacks

Closure ‚Äî capture variables at runtime





In GUI Programming:


A lambda is useful when you need to pass arguments to a slot, but the signal doesn‚Äôt provide any.


Example:

	self.button.clicked.connect(lambda: self.say("Hello!"))


	Without the lambda, writing:

		self.button.clicked.connect(self.say("Hello!"))

		would immediately call self.say("Hello!") during program start, not when clicked!





Lambda Capturing


You can capture variables using lambda:


	for label in ["One", "Two", "Three"]:
    		btn = QPushButton(label)
    		btn.clicked.connect(lambda _, l=label: self.clicked(l))

			Each button will correctly pass its label when clicked, thanks to the captured variable l=label.





üß© Wrapping it all together



Here‚Äôs a full PyQt5 example that uses signals, slots, and a lambda:


	from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QLabel, QVBoxLayout, QWidget

	class MainWindow(QMainWindow):
    		def __init__(self):
        	super().__init__()
        	self.setWindowTitle("Signals and Slots")

        	self.label = QLabel("Click a button!")
        	self.button1 = QPushButton("Say Hello")
        	self.button2 = QPushButton("Say Goodbye")

        	self.button1.clicked.connect(lambda: self.say("Hello!"))
        	self.button2.clicked.connect(lambda: self.say("Goodbye!"))

        	layout = QVBoxLayout()
        	layout.addWidget(self.label)
        	layout.addWidget(self.button1)
        	layout.addWidget(self.button2)

        	container = QWidget()
        	container.setLayout(layout)
        	self.setCentralWidget(container)

    		def say(self, message):
        		self.label.setText(message)

	app = QApplication([])
	window = MainWindow()
	window.show()
	app.exec_()



üü¢ What happens:


When button1 is clicked, the lambda triggers self.say("Hello!")

When button2 is clicked, the lambda triggers self.say("Goodbye!")

say() is the slot, clicked is the signal




üîö Summary



	Concept			What it Does


	Signal			Notifies that an event occurred (like a click)


	Slot			Responds to a signal by running a function


	connect()		Links a signal to a slot


	lambda			Anonymous function to defer execution or pass arguments









1. Importing Modules

	import sys

	import random

	from PyQt5 import QtCore, QtWidgets, QtGui


		sys: Used to access system-specific parameters. You'll use it to exit the application.


		random: Provides the random.choice() function to pick a greeting randomly.


		PyQt5: You import three submodules:


			QtCore: Core non-GUI functionality (like signals, slots, and constants).


			QtWidgets: GUI components like buttons, labels, layouts.


			QtGui: Tools for fonts, icons, and other GUI elements (not directly used here, but often included).








2. Class Definition: MyWidget


	class MyWidget(QtWidgets.QWidget):

		This defines a new widget (a window), inheriting from QWidget, the base class for all user interface objects in PyQt5.








3. Constructor Method


	def __init__(self):
    		super().__init__()


			__init__: Initializes the class.


			super().__init__(): Calls the constructor of the QWidget superclass so it sets up the window correctly.







5. Create Widgets


	self.button = QtWidgets.QPushButton("Click me!")


	self.text = QtWidgets.QLabel("Hello World")


	self.text.setAlignment(QtCore.Qt.AlignCenter)



		QPushButton: A button that says "Click me!".


		QLabel: A label that displays "Hello World".


		setAlignment(Qt.AlignCenter): Horizontally and vertically centers the label text.








6. Create Layout and Add Widgets


	self.layout = QtWidgets.QVBoxLayout()


	self.layout.addWidget(self.text)


	self.layout.addWidget(self.button)


	self.setLayout(self.layout)


		QVBoxLayout(): A vertical layout that stacks widgets vertically.


		addWidget(...): Adds the label first, then the button below it.


		setLayout(...): Sets the layout on the main window.








7. Connect Signal to Slot


	self.button.clicked.connect(self.magic)


		This connects the button‚Äôs clicked signal to the method self.magic.


		When the button is clicked, magic() is called.








8. Slot Definition: magic()


	@QtCore.pyqtSlot()
	def magic(self):
    		self.text.setText(random.choice(self.hello))


			Decorated with @pyqtSlot() to tell Qt this method is a slot (optional but good for performance).

			
			random.choice(...): Randomly selects a greeting from self.hello.


			setText(...): Updates the label with that greeting.









9. Application Entry Point


	if __name__ == "__main__":
    		app = QtWidgets.QApplication([])


			Creates the Qt application object. It's required to initialize the GUI system.


			[] is passed as an empty list of command-line arguments.









11. Run the Application


	sys.exit(app.exec_())


		Starts the Qt event loop (exec_()), which waits for user actions like button clicks.


		sys.exit(...) ensures a clean shutdown when the application closes.








